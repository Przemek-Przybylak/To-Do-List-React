{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/SearchQueryParamName.js","features/tasks/TasksPage/TasksList/index.js","Buttons/styled.js","Buttons/index.js","common/Section/Styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","Button/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/styled.js","features/author/AuthorPage.js","styled.js","features/NavList/styled.js","features/NavList/index.js","App.js","features/tasks/getExamplesTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","reportWebVitals.js","index.js"],"names":["localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","taskSlice","createSlice","name","initialState","parse","getItem","getTasksFromLocalStorage","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","setAllDone","forEach","removeTask","removeIndex","splice","fetchExampleTasks","setTasks","actions","selectTaskState","selectTask","StyledForm","styled","form","Button","button","Input","input","p","Paragraph","Form","useState","content","setcontent","dispatch","useDispatch","inputRef","useRef","onSubmit","event","preventDefault","trim","nanoid","current","focus","ref","value","onChange","target","placeholder","List","ul","Item","li","hidden","css","remove","toggleDone","Content","span","TasksList","location","useLocation","query","URLSearchParams","search","get","SearchQueryParamName","useSelector","filter","includes","selectTasksByQuery","map","onClick","to","ButtonItem","Buttons","length","disabled","every","StyledSection","section","SectionContainer","div","Tittle","h2","Section","tittle","body","extraHeaderContent","StyledHeader","header","h1","Header","Container","main","container","children","Wrapper","history","useHistory","getAll","searchParams","delete","set","pathname","toString","TasksPage","Search","TaskPage","useParams","taskId","find","getTaskById","Article","article","AuthorPage","StyledNavLink","NavLink","Ul","Li","NavList","App","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","FetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","call","exampleTasks","put","alert","select","console","log","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbaa893e.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey))?.tasks || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst taskSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks.forEach(task => {\r\n                task.done = true;\r\n            });\r\n        },\r\n        removeTask: (state, action) => {\r\n            const removeIndex = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(removeIndex, +1);\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        }\r\n    },\r\n})\r\nexport const {\r\n    addTask,\r\n    setTasks,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    removeTask,\r\n    fetchExampleTasks,\r\n} = taskSlice.actions;\r\nexport const selectTaskState = state => state.tasks;\r\nexport const selectTask = state => selectTaskState(state).tasks;\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTask(state).find(({ id }) => id === taskId);\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTask(state);\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) => {\r\n        return content?.includes?.(query.trim())\r\n    });\r\n}\r\nexport default taskSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    };\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 40px;\r\n    margin-left: 15px;\r\n    margin-right: 15px;\r\n    width: 150px;\r\n    background-color: teal;\r\n    color: white;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    @media (max-width:767px) {\r\n    align-self: center;\r\n    margin-bottom: 20px;\r\n    width: 90%;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n    };\r\n\r\n    &:hover{\r\n    background-color: rgb(56, 179, 179);\r\n    transform: scale(1.1);\r\n    };\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    font-size: 20px;\r\n    width: 100%;\r\n    padding: 10px;\r\n    height: 40px;\r\n    border: 1px solid rgb(214, 214, 214);\r\n\r\n    @media (max-width:767px) {\r\n    margin-right: 5%;\r\n    margin-left: 5%;\r\n    width: 90%;\r\n    };\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    flex-basis: 100%;\r\n    padding: 0px 0px 0px 20px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    font-size: 20px;\r\n    width: 100%;\r\n    padding: 10px;\r\n    height: 40px;\r\n    border: 1px solid rgb(214, 214, 214);\r\n\r\n    @media (max-width:767px) {\r\n    margin-right: 5%;\r\n    margin-left: 5%;\r\n    width: 90%;\r\n    };\r\n\r\n    \r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    flex-basis: 100%;\r\n    padding: 0px 0px 0px 20px;\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\nimport { Input, Paragraph } from \"../../Input/index\"\r\n\r\nconst Form = () => {\r\n    const [content, setcontent] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        dispatch(addTask({\r\n            content: content.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        addTask();\r\n        setcontent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Paragraph>\r\n                <label>\r\n                    <Input\r\n                        ref={inputRef}\r\n                        value={content}\r\n                        onChange={({ target }) => setcontent(target.value)}\r\n                        placeholder=\"Co jest do zrobienia?\"\r\n                    />\r\n                </label>\r\n            </Paragraph>\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n        margin: 0px;\r\n        list-style: none;\r\n        padding: 30px 30px;\r\n    `;\r\n\r\nexport const Item = styled.li`\r\n        display: flex;\r\n        border-bottom: 1px solid rgb(214, 214, 214);\r\n        padding: 10px 0px;\r\n        align-items: center;\r\n        word-break: break-all;\r\n    \r\n        ${({ hidden }) => hidden && css`\r\n            display: none;\r\n        `};\r\n    `;\r\n\r\nexport const Button = styled.button`\r\n        width: 25px;\r\n        height: 25px;\r\n        flex-shrink: 0;\r\n        border: none;\r\n\r\n        ${({ remove }) => remove && css`\r\n        margin-left: auto;\r\n        margin-right: 1px;\r\n        background-color: rgb(228, 39, 39);\r\n        background-position: center;\r\n        background-size: cover;\r\n        color: white;\r\n        transition: 0.5s;\r\n\r\n        &:hover{\r\n        background-color: rgb(255, 101, 45);\r\n            }\r\n        `};\r\n\r\n        ${({ toggleDone }) => toggleDone && css`\r\n        margin-right: 10px;\r\n        background-color: darkgreen;\r\n        background-position: center;\r\n        transition: 0.5s;\r\n        background-size: cover;\r\n        color: white;\r\n\r\n        &:hover{\r\n        background-color: forestgreen;\r\n            }\r\n        `};\r\n    `;\r\n\r\nexport const Content = styled.span`\r\n        ${({ done }) => done && css`\r\n        margin: 0 10px;\r\n        `};\r\n    `","export default \"szukaj\";","import { List, Item, Button, Content } from \"./styled\";\r\nimport { selectTaskState, toggleTaskDone, removeTask, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SearchQueryParamName from \"../../SearchQueryParamName\";\r\n\r\nconst TasksList = () => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const query = searchParams.get(SearchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectTaskState);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map((task) => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        toggleDone\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content\r\n                        done\r\n                    >\r\n                        <Link to={`/zadania/${task.id}`}>{task.content}</Link>\r\n                    </Content>\r\n                    <Button\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TasksList","import styled from \"styled-components\";\r\n\r\nexport const ButtonItem = styled.button`\r\n    border: none;\r\n    color: teal;\r\n    padding: 20px;\r\n    background-color: white;\r\n    transition: 0.5s;\r\n\r\n    @media (max-width: 767px) {\r\n    width: 100%;\r\n    };\r\n\r\n    &:hover{\r\n    color: rgb(56, 179, 179);\r\n    cursor: pointer;\r\n    };\r\n\r\n    &:disabled{\r\n    color: #ccc;\r\n    };\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonItem } from \"./styled\"\r\nimport { selectTaskState, toggleHideDone, setAllDone } from \"../../src/features/tasks/tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTaskState);\r\n  const dispatch = useDispatch();\r\n\r\n  if (tasks.length === 0)\r\n    return null;\r\n\r\n  return (\r\n    <div>\r\n      <ButtonItem\r\n        onClick={() => dispatch(toggleHideDone())}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n      </ButtonItem>\r\n      <ButtonItem\r\n        onClick={() => dispatch(setAllDone())}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        Ukończ wszystkie\r\n      </ButtonItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 20px auto;\r\n    background-color: white;\r\n`;\r\n\r\nexport const SectionContainer = styled.div`\r\n    border-bottom: 1px solid rgb(214, 214, 214);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    };\r\n`;\r\n\r\nexport const Tittle = styled.h2`\r\n    padding: 30px;\r\n    font-size: 22px;\r\n    margin-bottom: 0;\r\n    margin-top: 0px;\r\n\r\n    @media (max-width: 767px) {\r\n    width: 100%;\r\n    };\r\n`;","import { Tittle, StyledSection, SectionContainer } from \"./Styled\"\r\n\r\nconst Section = ({ tittle, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <SectionContainer>\r\n            <Tittle>\r\n                {tittle}\r\n            </Tittle>\r\n            {extraHeaderContent}\r\n        </SectionContainer>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin-bottom: 25px;\r\n    font-size: 16px;\r\n`;\r\n\r\nexport const Tittle = styled.h1`\r\n    padding-top: 20px;\r\n    padding-bottom: 10px;\r\n\r\n    @media(max-width: 996px){\r\n    padding-top: 5px;\r\n    padding-bottom: 3px;\r\n    };\r\n`;","import { StyledHeader, Tittle } from \"./styled\";\r\n\r\nconst Header = ({ tittle }) => (\r\n    <StyledHeader>\r\n        <Tittle>\r\n            {tittle}\r\n        </Tittle>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    font-family: 'Ubuntu', sans-serif;\r\n    padding: 50px 300px;\r\n    height: 100vh;\r\n    box-sizing: border-box;\r\n\r\n@media (max-width: 996px) {\r\n    padding: 30px 20px;\r\n    };\r\n\r\n&*, ::after, ::before {\r\n    box-sizing: inherit;\r\n    };\r\n`;","import { Container }from \"./styled\"\r\n\r\nconst container = ({ children }) => (\r\n    <Container>\r\n        {children}\r\n    </Container>\r\n);\r\n\r\nexport default container","import { useDispatch } from \"react-redux\";\r\nimport { ButtonItem } from \"../Buttons/styled\";\r\nimport { fetchExampleTasks } from \"../features/tasks/tasksSlice\";\r\n\r\nexport const Button = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <ButtonItem\r\n            onClick={() => dispatch(fetchExampleTasks())}>\r\n            Pobierz przykładowe zadania\r\n        </ButtonItem>\r\n    )\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 16px 20px;\r\n`;","import { useHistory, useLocation } from \"react-router\";\r\nimport SearchQueryParamName from \"../../SearchQueryParamName\";\r\nimport { Input } from \"../Form/styled\"\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const query = (new URLSearchParams(location.search)).getAll(SearchQueryParamName);\r\n\r\n    const onInputChange = ({ target }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (target.value.trim() === \"\") {\r\n            searchParams.delete(SearchQueryParamName);\r\n        } else {\r\n            searchParams.set(SearchQueryParamName, target.value);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`)\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n                <Input\r\n                    placeholder=\"Filtruj zadania\"\r\n                    value={query || \"\"}\r\n                    onChange={onInputChange}\r\n                />\r\n        </Wrapper>\r\n    )\r\n}","import Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"../../../Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { Button } from \"../../../Button\";\r\nimport Search from \"./Search\";\r\n\r\nexport function TasksPage() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        tittle=\"Lista zadań\"\r\n      />\r\n      <Section\r\n        tittle=\"Dodaj nowe zadanie\"\r\n        body={\r\n          < Form />\r\n        }\r\n        extraHeaderContent={\r\n          <Button />\r\n        }\r\n      />\r\n      <Section\r\n        tittle=\"Wyszukiwarka\"\r\n        body={\r\n          <Search />\r\n        }\r\n      />\r\n      <Section\r\n        tittle=\"Lista zadań\"\r\n        body={\r\n          <TasksList />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\n\r\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nexport function TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n \r\n  return (\r\n    <Container>\r\n      <Header\r\n        tittle=\"Szczegóły zadania\"\r\n      />\r\n      <Section\r\n        tittle={task ? task.content : \"Nie znaleziono zadania\"}\r\n        body={\r\n            <><strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}</>\r\n        }\r\n        />\r\n    </Container>\r\n  );\r\n};","import styled from \"styled-components\";\r\n\r\n\r\nexport const Article = styled.article`\r\n    padding: 30px;\r\n    font-size: 100%;\r\n    line-height: 1.15;\r\n    letter-spacing: 0.3px;\r\n`;","import Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport { Article } from \"./styled\";\r\n\r\nexport const AuthorPage = () => {\r\n    return (\r\n        <Container>\r\n            <Header\r\n                tittle=\"O Autorze\"\r\n            />\r\n            <Section\r\n                tittle=\"Przemek Przybylak\"\r\n                body={\r\n                    <>\r\n                        <Article>\r\n                            Nazywam się Przemysław Przybylak budową stron interesuję się od 2021 roku.<br />\r\n                            Obecnie moim głównym celem jest zostanie frontend developerem. Chcę jak najszybciej zostać\r\n                            profesjonalistą i rozpocząć swoją przygodę w branży IT!<br />\r\n                            Prywatnie jestem ojcem 2 dzieci. Są to dziewczynki pierwsza ma na imię <em>Ola</em>, a druga \r\n                            <em> Natalia</em>. Niedługo nasza rodzina powiększy się o kolejnego członka rodziny, a mianowicie o\r\n                            <em> Magdalenę</em>.<br />\r\n                            Kocham podróżować, oraz przebywać na łonie natury. Nieważne czy Tatry, czy pobliski las, przyroda od\r\n                            zawsze była dla mnie źródłem potężnego spokoju wewnętrznego, oraz natchnienia.<br />\r\n                            Skoro kocham góry, to dlaczego nie zająć się alpinistyką przemysłową?<br />\r\n                            Niedawno zdobyłem certyfikat IRATA level 1, dzięki czemu mogę wykonuję pracę Alpinisty Przemysłowego.\r\n                        </Article>\r\n                    </>\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n    text-decoration: none;\r\n    color: white;\r\n\r\n    &.active {\r\n        color: red;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Ul = styled.ul`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: teal;\r\n    color: white;\r\n    margin: 0px;\r\n    padding: 0px;\r\n`;\r\n\r\nexport const Li = styled.li`\r\n    list-style-type: none;\r\n    padding: 5px;\r\n    font-size: 23px;\r\n`;\r\n\r\n","import { StyledNavLink } from \"../../styled\";\r\nimport { Ul, Li } from \"./styled\"\r\n\r\n\r\nexport const NavList = () => {\r\n    return (\r\n        <Ul>\r\n            <Li>\r\n                <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n            </Li>\r\n            <Li>\r\n                <StyledNavLink to=\"/author\">O autorze</StyledNavLink>\r\n            </Li>\r\n        </Ul>\r\n    )\r\n}","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { TasksPage } from \"./features/tasks/TasksPage/index.js\";\r\nimport { TaskPage } from \"./features/tasks/TaskPage\"\r\nimport { AuthorPage } from \"./features/author/AuthorPage\";\r\nimport { NavList } from \"./features/NavList\";\r\n\r\n\r\nexport const App = () =>\r\n    <HashRouter>\r\n        <nav>\r\n            <NavList />\r\n            <Switch>\r\n                <Route path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/author\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"/zadania\" />\r\n                </Route>\r\n            </Switch>\r\n        </nav>\r\n    </HashRouter>\r\n    ;\r\n\r\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/To-Do-List-React/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeEvery, call, put, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, selectTaskState, setTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExamplesTasks\";\r\nimport { saveTasksInLocalStorage} from \"./tasksLocalStorage\"\r\n\r\nfunction* FetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Hej, coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTaskState);\r\n    yield call(saveTasksInLocalStorage, tasks)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    console.log(\"saga\")\r\n    yield takeEvery(fetchExampleTasks.type, FetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"@redux-saga/core/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ])\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from'./features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from './App';\nimport store from './store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}