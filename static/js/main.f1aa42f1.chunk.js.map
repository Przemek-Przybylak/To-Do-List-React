{"version":3,"sources":["Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","content","setcontent","className","onSubmit","event","preventDefault","trim","value","onChange","target","placeholder","List","styled","ul","Item","li","hidden","css","Button","button","remove","toggleDone","Content","span","done","Tasks","tasks","hideDone","removeTasks","toggleTaskDone","map","task","onClick","id","Buttons","toggleHideDone","setAllDone","lenght","disabled","every","Section","tittle","body","extraHeaderContent","Header","container","children","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","Container","length","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1aa42f1.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n\r\n    const [content, setcontent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(content.trim());\r\n        setcontent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"section__form\" onSubmit={onFormSubmit}>\r\n            <p className=\"section__paragraph\">\r\n                <label>\r\n                    <input\r\n                        value={content}\r\n                        onChange={({target}) => setcontent(target.value)}\r\n                        className=\"section__input\"\r\n                        placeholder=\"Co jest do zrobienia?\"\r\n                    />\r\n                </label>\r\n            </p>\r\n            <button className=\"section__button\">\r\n                Dodaj zadanie\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form","import styled, {css} from \"styled-components\";\r\n\r\n    export const List = styled.ul`\r\n        margin: 0px;\r\n        list-style: none;\r\n        padding: 30px 30px;\r\n    `;\r\n\r\n    export const Item = styled.li`\r\n        display: flex;\r\n        border-bottom: 1px solid rgb(214, 214, 214);\r\n        padding: 10px 0px;\r\n        align-items: center;\r\n        word-break: break-all;\r\n    \r\n        ${({ hidden }) => hidden  && css`\r\n            display: none;\r\n        `};\r\n    `;\r\n\r\n    export const Button = styled.button`\r\n        width: 25px;\r\n        height: 25px;\r\n        flex-shrink: 0;\r\n        border: none;\r\n\r\n        ${({remove}) => remove && css`\r\n            margin-left: auto;\r\n            margin-right: 1px;\r\n            background-color: rgb(228, 39, 39);\r\n            background-position: center;\r\n            background-size: cover;\r\n            color: white;\r\n            transition: 0.5s;\r\n\r\n            &:hover{\r\n                background-color: rgb(255, 101, 45);\r\n            }\r\n        `};\r\n\r\n        ${({toggleDone}) => toggleDone && css`\r\n            margin-right: 10px;\r\n            background-color: darkgreen;\r\n            background-position: center;\r\n            transition: 0.5s;\r\n            background-size: cover;\r\n            color: white;\r\n\r\n            $:hover{\r\n                background-color: forestgreen;\r\n            }\r\n        `};\r\n    `;\r\n\r\n    export const Content = styled.span `\r\n        ${({done}) => done && css`\r\n        margin: 0 10px;\r\n        `};\r\n    `","import { List, Item, Button, Content } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTasks, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button \r\n                onClick={ () => toggleTaskDone(task.id)}\r\n                toggleDone\r\n                >\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </Button>\r\n                <Content \r\n                done\r\n                >\r\n                    {task.content}</Content>\r\n                <Button \r\n                onClick={ () => removeTasks(task.id)} \r\n                remove\r\n                >ðŸ—‘\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n)\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n\r\n  if (tasks.lenght === 0) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"button\">\r\n      <button\r\n        onClick={toggleHideDone}\r\n        className=\"button__item button__item--hidingDone\"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className=\"button__item button__item--doneAll\"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >UkoÅ„cz wszystkie</button>\r\n\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\n\r\n\r\nexport default Buttons","import \"./style.css\";\r\n\r\nconst Section = ({ tittle, body, extraHeaderContent }) => (\r\n    <section className=\"section section__tasks\">\r\n        <div className=\"section__container section__container--tittleTask\">\r\n            <h2 className=\"section__tittle\">{tittle}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n    </section>\r\n)\r\n\r\nexport default Section","import \"./style.css\";\r\n\r\nconst Header = ({ tittle }) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__tittle\">{tittle}</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header","import \"./style.css\"\r\n\r\nconst container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n)\r\n\r\nexport default container","import { useEffect, useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false)\r\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addNewTask = (content) => {\r\n\r\n    if (content === \"\")\r\n      return \"\";\r\n\r\n    (setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ])\r\n    )\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      return {\r\n        ...task,\r\n        done: true,\r\n      }\r\n    }));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n      return task;\r\n    }\r\n    ));\r\n  };\r\n\r\n  const removeTasks = (id) => {\r\n    setTasks(tasks => tasks.filter(\r\n      task => task.id !== id));\r\n  };\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone)\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        tittle=\"Lista zadaÅ„\"\r\n      />\r\n\r\n      <Section\r\n        tittle=\"Dodaj nowe zadanie\"\r\n        body={< Form addNewTask={addNewTask} />}\r\n      />\r\n\r\n      <Section\r\n        tittle=\"Lista zadaÅ„\"\r\n        body={\r\n          <Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTasks={removeTasks}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />}\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone} />}\r\n      />\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}