{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","Buttons/styled.js","Buttons/index.js","common/Section/Styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","Button/index.js","features/tasks/Tasks.js","App.js","features/tasks/getExamplesTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","reportWebVitals.js","index.js"],"names":["localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","taskSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","setAllDone","forEach","removeTask","removeIndex","splice","fetchExampleTasks","setTasks","actions","selectTasks","StyledForm","styled","form","Button","button","Input","input","Paragraph","p","Form","useState","content","setcontent","dispatch","useDispatch","inputRef","useRef","onSubmit","event","preventDefault","trim","nanoid","current","focus","ref","value","onChange","target","placeholder","List","ul","Item","li","hidden","css","remove","toggleDone","Content","span","TasksList","useSelector","map","onClick","ButtonItem","Buttons","length","disabled","every","StyledSection","section","SectionContainer","div","Tittle","h2","Section","tittle","body","extraHeaderContent","StyledHeader","header","h1","Header","Container","main","container","children","Tasks","App","getExampleTasks","a","fetch","response","ok","Error","statusText","json","FetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","call","exampleTasks","put","alert","select","console","log","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3543f82c.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst taskSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage().tasks,\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({tasks}, {payload}) => {\r\n            tasks.push(payload)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone= !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks.forEach(task => {\r\n                task.done = true;\r\n            });\r\n        },\r\n        removeTask: (state, action) => {\r\n            const removeIndex = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(removeIndex, +1);\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        }\r\n    },\r\n})\r\nexport const { \r\n    addTask, \r\n    setTasks,\r\n    toggleHideDone, \r\n    toggleTaskDone, \r\n    setAllDone, \r\n    removeTask,\r\n    fetchExampleTasks, \r\n}= taskSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default taskSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    };\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 40px;\r\n    margin-left: 15px;\r\n    margin-right: 15px;\r\n    width: 150px;\r\n    background-color: teal;\r\n    color: white;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    @media (max-width:767px) {\r\n    align-self: center;\r\n    margin-bottom: 20px;\r\n    width: 90%;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n    };\r\n\r\n    &:hover{\r\n    background-color: rgb(56, 179, 179);\r\n    transform: scale(1.1);\r\n    };\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    font-size: 20px;\r\n    width: 100%;\r\n    padding: 10px;\r\n    height: 40px;\r\n    border: 1px solid rgb(214, 214, 214);\r\n\r\n    @media (max-width:767px) {\r\n    margin-right: 5%;\r\n    margin-left: 5%;\r\n    width: 90%;\r\n    };\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    flex-basis: 100%;\r\n    padding: 0px 0px 0px 20px;\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Button, Input, Paragraph } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [content, setcontent] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        dispatch(addTask({\r\n            content: content.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        addTask();\r\n        setcontent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Paragraph>\r\n                <label>\r\n                    <Input\r\n                        ref={inputRef}\r\n                        value={content}\r\n                        onChange={({ target }) => setcontent(target.value)}\r\n                        placeholder=\"Co jest do zrobienia?\"\r\n                    />\r\n                </label>\r\n            </Paragraph>\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n        margin: 0px;\r\n        list-style: none;\r\n        padding: 30px 30px;\r\n    `;\r\n\r\nexport const Item = styled.li`\r\n        display: flex;\r\n        border-bottom: 1px solid rgb(214, 214, 214);\r\n        padding: 10px 0px;\r\n        align-items: center;\r\n        word-break: break-all;\r\n    \r\n        ${({ hidden }) => hidden && css`\r\n            display: none;\r\n        `};\r\n    `;\r\n\r\nexport const Button = styled.button`\r\n        width: 25px;\r\n        height: 25px;\r\n        flex-shrink: 0;\r\n        border: none;\r\n\r\n        ${({ remove }) => remove && css`\r\n        margin-left: auto;\r\n        margin-right: 1px;\r\n        background-color: rgb(228, 39, 39);\r\n        background-position: center;\r\n        background-size: cover;\r\n        color: white;\r\n        transition: 0.5s;\r\n\r\n        &:hover{\r\n        background-color: rgb(255, 101, 45);\r\n            }\r\n        `};\r\n\r\n        ${({ toggleDone }) => toggleDone && css`\r\n        margin-right: 10px;\r\n        background-color: darkgreen;\r\n        background-position: center;\r\n        transition: 0.5s;\r\n        background-size: cover;\r\n        color: white;\r\n\r\n        &:hover{\r\n        background-color: forestgreen;\r\n            }\r\n        `};\r\n    `;\r\n\r\nexport const Content = styled.span`\r\n        ${({ done }) => done && css`\r\n        margin: 0 10px;\r\n        `};\r\n    `","import { List, Item, Button, Content } from \"./styled\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst TasksList = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map((task) => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        toggleDone\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content\r\n                        done\r\n                    >\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TasksList","import styled from \"styled-components\";\r\n\r\nexport const ButtonItem = styled.button`\r\n    border: none;\r\n    color: teal;\r\n    padding: 20px;\r\n    background-color: white;\r\n    transition: 0.5s;\r\n\r\n    @media (max-width: 767px) {\r\n    width: 100%;\r\n    };\r\n\r\n    &:hover{\r\n    color: rgb(56, 179, 179);\r\n    cursor: pointer;\r\n    };\r\n\r\n    &:disabled{\r\n    color: #ccc;\r\n    };\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonItem } from \"./styled\"\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../../src/features/tasks/tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  if (tasks.length === 0)\r\n    return null;\r\n\r\n  return (\r\n    <div>\r\n      <ButtonItem\r\n        onClick={() => dispatch(toggleHideDone())}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n      </ButtonItem>\r\n      <ButtonItem\r\n        onClick={() => dispatch(setAllDone())}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        Ukończ wszystkie\r\n      </ButtonItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 20px auto;\r\n    background-color: white;\r\n`;\r\n\r\nexport const SectionContainer = styled.div`\r\n    border-bottom: 1px solid rgb(214, 214, 214);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    };\r\n`;\r\n\r\nexport const Tittle = styled.h2`\r\n    padding: 30px;\r\n    font-size: 22px;\r\n    margin-bottom: 0;\r\n    margin-top: 0px;\r\n\r\n    @media (max-width: 767px) {\r\n    width: 100%;\r\n    };\r\n`;","import { Tittle, StyledSection, SectionContainer } from \"./Styled\"\r\n\r\nconst Section = ({ tittle, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <SectionContainer>\r\n            <Tittle>\r\n                {tittle}\r\n            </Tittle>\r\n            {extraHeaderContent}\r\n        </SectionContainer>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin-bottom: 25px;\r\n    font-size: 16px;\r\n`;\r\n\r\nexport const Tittle = styled.h1`\r\n    padding-top: 20px;\r\n    padding-bottom: 10px;\r\n\r\n    @media(max-width: 996px){\r\n    padding-top: 5px;\r\n    padding-bottom: 3px;\r\n    };\r\n`;","import { StyledHeader, Tittle } from \"./styled\";\r\n\r\nconst Header = ({ tittle }) => (\r\n    <StyledHeader>\r\n        <Tittle>\r\n            {tittle}\r\n        </Tittle>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    background-color: #eee;\r\n    font-family: 'Ubuntu', sans-serif;\r\n    padding: 50px 300px;\r\n    height: 100vh;\r\n    box-sizing: border-box;\r\n\r\n@media (max-width: 996px) {\r\n    padding: 30px 20px;\r\n    };\r\n\r\n&*, ::after, ::before {\r\n    box-sizing: inherit;\r\n    };\r\n`;","import { Container }from \"./styled\"\r\n\r\nconst container = ({ children }) => (\r\n    <Container>\r\n        {children}\r\n    </Container>\r\n);\r\n\r\nexport default container","import { useDispatch } from \"react-redux\";\r\nimport { ButtonItem } from \"../Buttons/styled\";\r\nimport { fetchExampleTasks } from \"../features/tasks/tasksSlice\";\r\n\r\nexport const Button = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <ButtonItem\r\n            onClick={() => dispatch(fetchExampleTasks())}>\r\n            Pobierz przykładowe zadania\r\n        </ButtonItem>\r\n    )\r\n};","import Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"../../Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport { Button } from \"../../Button\";\r\n\r\nexport function Tasks() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        tittle=\"Lista zadań\"\r\n      />\r\n      <Section\r\n        tittle=\"Dodaj nowe zadanie\"\r\n        body={\r\n          < Form />\r\n        }\r\n        extraHeaderContent={ \r\n          <Button />\r\n        }\r\n      />\r\n      <Section\r\n        tittle=\"Lista zadań\"\r\n        body={\r\n          <TasksList />\r\n        }\r\n        extraHeaderContent={ \r\n          <Buttons />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import{ Tasks }from \"./features/tasks/Tasks\";\r\n\r\nexport const App = () => <Tasks />;\r\n\r\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/To-Do-List-React/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeEvery, call, put, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExamplesTasks\";\r\nimport { saveTasksInLocalStorage} from \"./tasksLocalStorage\"\r\n\r\nfunction* FetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Hej, coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    console.log(\"saga\")\r\n    yield takeEvery(fetchExampleTasks.type, FetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"@redux-saga/core/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ])\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from'./features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from './App';\nimport store from './store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}